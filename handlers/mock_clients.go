// Code generated by MockGen. DO NOT EDIT.
// Source: clients.go

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	io "io"
	url "net/url"
	reflect "reflect"

	releasecalendar "github.com/ONSdigital/dp-api-clients-go/v2/releasecalendar"
	search "github.com/ONSdigital/dp-api-clients-go/v2/site-search"
	model "github.com/ONSdigital/dp-renderer/model"
	gomock "github.com/golang/mock/gomock"
)

// MockClientError is a mock of ClientError interface.
type MockClientError struct {
	ctrl     *gomock.Controller
	recorder *MockClientErrorMockRecorder
}

// MockClientErrorMockRecorder is the mock recorder for MockClientError.
type MockClientErrorMockRecorder struct {
	mock *MockClientError
}

// NewMockClientError creates a new mock instance.
func NewMockClientError(ctrl *gomock.Controller) *MockClientError {
	mock := &MockClientError{ctrl: ctrl}
	mock.recorder = &MockClientErrorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientError) EXPECT() *MockClientErrorMockRecorder {
	return m.recorder
}

// Code mocks base method.
func (m *MockClientError) Code() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Code")
	ret0, _ := ret[0].(int)
	return ret0
}

// Code indicates an expected call of Code.
func (mr *MockClientErrorMockRecorder) Code() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Code", reflect.TypeOf((*MockClientError)(nil).Code))
}

// Error mocks base method.
func (m *MockClientError) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockClientErrorMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockClientError)(nil).Error))
}

// MockRenderClient is a mock of RenderClient interface.
type MockRenderClient struct {
	ctrl     *gomock.Controller
	recorder *MockRenderClientMockRecorder
}

// MockRenderClientMockRecorder is the mock recorder for MockRenderClient.
type MockRenderClientMockRecorder struct {
	mock *MockRenderClient
}

// NewMockRenderClient creates a new mock instance.
func NewMockRenderClient(ctrl *gomock.Controller) *MockRenderClient {
	mock := &MockRenderClient{ctrl: ctrl}
	mock.recorder = &MockRenderClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRenderClient) EXPECT() *MockRenderClientMockRecorder {
	return m.recorder
}

// BuildPage mocks base method.
func (m *MockRenderClient) BuildPage(w io.Writer, pageModel interface{}, templateName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BuildPage", w, pageModel, templateName)
}

// BuildPage indicates an expected call of BuildPage.
func (mr *MockRenderClientMockRecorder) BuildPage(w, pageModel, templateName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildPage", reflect.TypeOf((*MockRenderClient)(nil).BuildPage), w, pageModel, templateName)
}

// NewBasePageModel mocks base method.
func (m *MockRenderClient) NewBasePageModel() model.Page {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewBasePageModel")
	ret0, _ := ret[0].(model.Page)
	return ret0
}

// NewBasePageModel indicates an expected call of NewBasePageModel.
func (mr *MockRenderClientMockRecorder) NewBasePageModel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewBasePageModel", reflect.TypeOf((*MockRenderClient)(nil).NewBasePageModel))
}

// MockReleaseCalendarAPI is a mock of ReleaseCalendarAPI interface.
type MockReleaseCalendarAPI struct {
	ctrl     *gomock.Controller
	recorder *MockReleaseCalendarAPIMockRecorder
}

// MockReleaseCalendarAPIMockRecorder is the mock recorder for MockReleaseCalendarAPI.
type MockReleaseCalendarAPIMockRecorder struct {
	mock *MockReleaseCalendarAPI
}

// NewMockReleaseCalendarAPI creates a new mock instance.
func NewMockReleaseCalendarAPI(ctrl *gomock.Controller) *MockReleaseCalendarAPI {
	mock := &MockReleaseCalendarAPI{ctrl: ctrl}
	mock.recorder = &MockReleaseCalendarAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReleaseCalendarAPI) EXPECT() *MockReleaseCalendarAPIMockRecorder {
	return m.recorder
}

// GetLegacyRelease mocks base method.
func (m *MockReleaseCalendarAPI) GetLegacyRelease(ctx context.Context, userAccessToken, collectionID, lang, uri string) (*releasecalendar.Release, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLegacyRelease", ctx, userAccessToken, collectionID, lang, uri)
	ret0, _ := ret[0].(*releasecalendar.Release)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLegacyRelease indicates an expected call of GetLegacyRelease.
func (mr *MockReleaseCalendarAPIMockRecorder) GetLegacyRelease(ctx, userAccessToken, collectionID, lang, uri interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLegacyRelease", reflect.TypeOf((*MockReleaseCalendarAPI)(nil).GetLegacyRelease), ctx, userAccessToken, collectionID, lang, uri)
}

// MockSearchAPI is a mock of SearchAPI interface.
type MockSearchAPI struct {
	ctrl     *gomock.Controller
	recorder *MockSearchAPIMockRecorder
}

// MockSearchAPIMockRecorder is the mock recorder for MockSearchAPI.
type MockSearchAPIMockRecorder struct {
	mock *MockSearchAPI
}

// NewMockSearchAPI creates a new mock instance.
func NewMockSearchAPI(ctrl *gomock.Controller) *MockSearchAPI {
	mock := &MockSearchAPI{ctrl: ctrl}
	mock.recorder = &MockSearchAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchAPI) EXPECT() *MockSearchAPIMockRecorder {
	return m.recorder
}

// GetReleases mocks base method.
func (m *MockSearchAPI) GetReleases(ctx context.Context, userAccessToken, collectionID, lang string, query url.Values) (search.ReleaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReleases", ctx, userAccessToken, collectionID, lang, query)
	ret0, _ := ret[0].(search.ReleaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReleases indicates an expected call of GetReleases.
func (mr *MockSearchAPIMockRecorder) GetReleases(ctx, userAccessToken, collectionID, lang, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReleases", reflect.TypeOf((*MockSearchAPI)(nil).GetReleases), ctx, userAccessToken, collectionID, lang, query)
}

// MockBabbageAPI is a mock of BabbageAPI interface.
type MockBabbageAPI struct {
	ctrl     *gomock.Controller
	recorder *MockBabbageAPIMockRecorder
}

// MockBabbageAPIMockRecorder is the mock recorder for MockBabbageAPI.
type MockBabbageAPIMockRecorder struct {
	mock *MockBabbageAPI
}

// NewMockBabbageAPI creates a new mock instance.
func NewMockBabbageAPI(ctrl *gomock.Controller) *MockBabbageAPI {
	mock := &MockBabbageAPI{ctrl: ctrl}
	mock.recorder = &MockBabbageAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBabbageAPI) EXPECT() *MockBabbageAPIMockRecorder {
	return m.recorder
}

// GetMaxAge mocks base method.
func (m *MockBabbageAPI) GetMaxAge(ctx context.Context, contentUri, key string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxAge", ctx, contentUri, key)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaxAge indicates an expected call of GetMaxAge.
func (mr *MockBabbageAPIMockRecorder) GetMaxAge(ctx, contentUri, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxAge", reflect.TypeOf((*MockBabbageAPI)(nil).GetMaxAge), ctx, contentUri, key)
}
